Class {
	#name : #FmxMBGeneratorTest,
	#superclass : #FmxMBTestCase,
	#category : #'Famix-MetamodelBuilder-Tests'
}

{ #category : #tests }
FmxMBGeneratorTest >> testBuilderWithDefinitions [
	builder := FamixTest1Generator builderWithDefinitions.
	builder prepareGeneration.
	self assert: (builder classNamed: #Entity) isNotNil
]

{ #category : #tests }
FmxMBGeneratorTest >> testGenerateMooseModelSubclass [

	FamixTest1Generator new generate.
	self assert: ('Famix-Test1-Entities' asPackage definedClasses anySatisfy: [ :c | c superclass = MooseModel]).
	self assert: ('Famix-Test1-Entities' asPackage definedClasses anySatisfy: [ :c | c name = 'FamixTest1Model'])
]

{ #category : #tests }
FmxMBGeneratorTest >> testGeneratedClassesDoNotOverrideMethodsWithGeneratedPragmaToAddVersionWithTheSameAST [
	| duplicatedMethods |
	duplicatedMethods := SystemNavigation default allClasses iterator
		| #hasTraitComposition selectIt
		| #isMetamodelEntity selectIt
		| [ :class | class localMethods , class class localMethods ] flatCollectIt
		| [ :method | method pragmas anySatisfy: [ :pragma | pragma selector = #generated ] ] rejectIt
		| #isEquivalentToGeneratedMethodOfTrait selectIt
		> Array.
		
	self assertEmpty: duplicatedMethods
]

{ #category : #tests }
FmxMBGeneratorTest >> testGeneratorsAreUpToDate [

	FamixMetamodelGenerator generatorsToKeepUpToDate do: [ :mm |
		| changes |
		changes := mm new changesToApply.
		self assert: changes isEmpty description: [
			'The generator ' , mm asString
			, ' is not in sync with its meta-model. Please, regenerate your MMs with `FamixMetamodelGenerator generateAllMetamodels`. List of changes: '
			, changes printString ] ]
]

{ #category : #tests }
FmxMBGeneratorTest >> testMooseModelSubclassHasMetaModel [
	self assert: FamixTest1Model metamodel isNotNil.
	self deny: MooseModel metamodel equals: FamixTest1Model metamodel
]

{ #category : #tests }
FmxMBGeneratorTest >> testResetMetamodel [
	| metamodel |
	metamodel := FamixTest1Model resetMetamodel.
	self assert: (metamodel elementNamed: 'Famix-Test1-Entities.Entity' ifAbsent: [ nil ]) isNotNil
]

{ #category : #tests }
FmxMBGeneratorTest >> testResetMetamodelSetNewMetamodelToInstances [
	| model oldMetamodel metamodel |
	model := FamixTest1Model new.
	oldMetamodel := model metamodel.
	self assert: model metamodel identicalTo: oldMetamodel.
	metamodel := FamixTest1Model resetMetamodel.
	self deny: model metamodel identicalTo: oldMetamodel.
	self assert: model metamodel identicalTo: metamodel
]

{ #category : #tests }
FmxMBGeneratorTest >> testSubmetamodles [
	self assertEmpty: FamixMetamodelGenerator submetamodels
]
